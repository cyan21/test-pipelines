template: true   # required for local templates.
valuesFilePath: ./values.yml

pipelines:
  - name: syncDR
    configuration:
      jfrogCliVersion: 2
      environmentVariables: 
        readOnly:
          JFROG_CLI_PLUGINS_SERVER: jpd
          JFROG_CLI_PLUGINS_REPO: jfrog-automation
    steps:
      - name: testBashV2
        type: utils/bashV2
        configuration:
          affinityGroup: together
          integrations:
          {{- range .Values.jpdIntegrationName }}
            - name: "{{ . }}"
          {{- end }}
        execution:
          onExecute:
            - echo "Hello World"
      - name: Ping
        type: utils/ping
        configuration:
          affinityGroup: together
          inputSteps:
            - name: testBashV2
          integrations:
          {{- range .Values.jpdIntegrationName }}
            - name: "{{ . }}"
          {{- end }}
          iteration: 2
          sleepBetweenIteration: 5
      - name: checkOutages
        type: Bash
        configuration:
          affinityGroup: together
          inputSteps:
            - name: Ping
          integrations:
          {{- range .Values.jpdIntegrationName }}
            - name: "{{ . }}"
          {{- end }}
        execution:
          onStart:
            # - echo "Ping status = ${step_Ping_statusName}"
            - echo {{ .Values.jpdIntegrationName }}
            # - saas_dr=$(echo {{ .Values.jpdIntegrationName }} | cut -d" " -f2 | tr -d ])
            - saas_dr=$(echo {{ .Values.jpdIntegrationName }} | cut -d" " -f1 | tr -d [)
            - url="int_${saas_dr}_url"
            - token="int_${saas_dr}_accessToken"
            - configure_jfrog_cli --artifactory-url "${!url}/artifactory" --access-token "${!token}" --server-name saas_dr
            - jf -v
            - jf c s
            - jf rt ping
          onExecute:
            - requestDateTime=$(jf rt s {{ .Values.automationRepo }}/{{ .Values.statusFile }} | jq -r ".[].props.requestDateTime[]")
            - |
              if [[ $requestDateTime -eq "" ]]; then 
                echo "[WARN] {{ .Values.statusFile }} NOT found or "requestDateTime" properties could NOT be found . Check if the Health Check pipeline has run on the DR side"
                exit 1              
              fi
            - canUpdateDR=$(jf rt s {{ .Values.automationRepo }}/{{ .Values.statusFile }} | jq -r ".[].props.canUpdateDR[]")
            - |
              if [[ $? -eq "" ]]; then 
                echo "[WARN] "canUpdateDR" properties could NOT be found . Check if the Health Check pipeline has run on the DR side"
                exit 1              
              fi            
            - epochNow=$(date +%s)
            - echo $canUpdateDR
            - echo $requestDateTime
            # - |
            #   if [[ $epochNow - $requestDateTime > {{ .Values.HealthCheckIntervalInSec }} ]] ; then 
            #       echo "[ERROR] the last update on the  {{ .Values.automationRepo }}/{{ .Values.statusFile }} was more than {{ .Values.HealthCheckIntervalInSec }} seconds."
            #       exit 1
            #   fi 
            # - |
            #   if [[ $canUpdateDR -eq "false" ]] ; then
            #       echo "[WARN] File {{ .Values.automationRepo }}/{{ .Values.statusFile }} : canUpdateDR=false; No sync will be pushed to the DR."
            #       exit 2
            #   fi
      - name: createLocalRepositories
        type: Bash
        configuration:
          environmentVariables:
            JFROG_CLI_LOG_LEVEL: DEBUG
          affinityGroup: together
          inputSteps:
            - name: checkOutages
          integrations:
          {{- range .Values.jpdIntegrationName }}
            - name: "{{ . }}"
          {{- end }}
        execution:
          onStart:
            - saas_dr=$(echo {{ .Values.jpdIntegrationName }} | cut -d" " -f1 | tr -d [)
            - url="int_${saas_dr}_url"
            - token="int_${saas_dr}_accessToken"
            - configure_jfrog_cli --artifactory-url "${!url}/artifactory" --access-token "${!token}" --server-name jpd
            - jf -v
            - jf c s
            - jf rt ping
            - jf plugin install {{ .Values.cliPlugin.name }}@{{ .Values.cliPlugin.version }}
          onExecute:
            - jf {{ .Values.cliPlugin.name }} -v 
      - name: createRemoteRepositories
        type: Bash
        configuration:
          affinityGroup: together
          inputSteps:
            - name: createLocalRepositories
          integrations:
          {{- range .Values.jpdIntegrationName }}
            - name: "{{ . }}"
          {{- end }}
        execution:
          onStart:
            - saas_dr=$(echo {{ .Values.jpdIntegrationName }} | cut -d" " -f1 | tr -d [)
            - url="int_${saas_dr}_url"
            - token="int_${saas_dr}_accessToken"
            - configure_jfrog_cli --artifactory-url "${!url}/artifactory" --access-token "${!token}" --server-name jpd
            - jf -v
            - jf c s
            - jf rt ping
            - jf plugin install {{ .Values.cliPlugin.name }}@{{ .Values.cliPlugin.version }}
          onExecute:
            - jf {{ .Values.cliPlugin.name }} -v 
      - name: createVirtualRepositories
        type: Bash
        configuration:
          affinityGroup: together
          inputSteps:
            - name: createRemoteRepositories
          integrations:
          {{- range .Values.jpdIntegrationName }}
            - name: "{{ . }}"
          {{- end }}        
        execution:
          onStart:
            - saas_dr=$(echo {{ .Values.jpdIntegrationName }} | cut -d" " -f1 | tr -d [)
            - url="int_${saas_dr}_url"
            - token="int_${saas_dr}_accessToken"
            - configure_jfrog_cli --artifactory-url "${!url}/artifactory" --access-token "${!token}" --server-name jpd
            - jf -v
            - jf c s
            - jf rt ping
            - jf plugin install {{ .Values.cliPlugin.name }}@{{ .Values.cliPlugin.version }}
          onExecute:
            - jf {{ .Values.cliPlugin.name }} -v 
      - name: storeDRInventory
        type: Bash
        configuration:
          affinityGroup: together
          inputSteps:
            - name: createVirtualRepositories
          integrations:
          {{- range .Values.jpdIntegrationName }}
            - name: "{{ . }}"
          {{- end }}
        execution:
          onStart:
            - saas_dr=$(echo {{ .Values.jpdIntegrationName }} | cut -d" " -f1 | tr -d [)
            - url="int_${saas_dr}_url"
            - token="int_${saas_dr}_accessToken"
            - configure_jfrog_cli --artifactory-url "${!url}/artifactory" --access-token "${!token}" --server-name jpd
            - jf -v
            - jf c s
            - jf rt ping
            - jf plugin install {{ .Values.cliPlugin.name }}@{{ .Values.cliPlugin.version }}
          onExecute:
            - jf {{ .Values.cliPlugin.name }} -v 