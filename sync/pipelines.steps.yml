template: true   # required for local templates.
valuesFilePath: ./values.yml

pipelines:
  - name: syncDR
    configuration:
      jfrogCliVersion: 2
      environmentVariables: 
        readOnly:
          JFROG_CLI_PLUGINS_SERVER: jpd
          JFROG_CLI_PLUGINS_REPO: jfrog-automation
          JF_PLUGIN_REPOSYNC_INVENTORY_PATH: /tmp/
    steps:
      - name: Ping
        type: utils/ping
        configuration:
          affinityGroup: together
          integrations:
          # {{- range .Values.jpdIntegrationName }}
          #   - name: "{{ . }}"
          # {{- end }}
            - name: {{ .Values.jpdMain }}
            - name: {{ .Values.jpdDr }}
          iteration: 2
          sleepBetweenIteration: 5
      - name: checkOutagesV2
        type: utils/bashV2
        configuration:
          affinityGroup: together
          inputSteps:
            - name: Ping
          integrations:
            - name: {{ .Values.jpdDr }}
        execution:
          onExecute:
            - requestDateTime=$(jf rt s {{ .Values.automationRepo }}/{{ .Values.statusFile }} | jq -r ".[].props.requestDateTime[]")
            - |
              if [[ $requestDateTime -eq "" ]]; then 
                echo "[WARN] {{ .Values.statusFile }} NOT found or "requestDateTime" properties could NOT be found . Check if the Health Check pipeline has run on the DR side"
                exit 1              
              fi
            - canUpdateDR=$(jf rt s {{ .Values.automationRepo }}/{{ .Values.statusFile }} | jq -r ".[].props.canUpdateDR[]")
            - |
              if [[ $? -eq "" ]]; then 
                echo "[WARN] "canUpdateDR" properties could NOT be found . Check if the Health Check pipeline has run on the DR side"
                exit 1              
              fi            
            - epochNow=$(date +%s)
            - echo $canUpdateDR
            - echo $requestDateTime
            - |
              if [[ $epochNow - $requestDateTime > {{ .Values.HealthCheckIntervalInSec }} ]] ; then 
                  echo "[ERROR] the last update on the  {{ .Values.automationRepo }}/{{ .Values.statusFile }} was more than {{ .Values.HealthCheckIntervalInSec }} seconds."
                  exit 1
              fi 
            - |
              if [[ $canUpdateDR -eq "false" ]] ; then
                  echo "[WARN] File {{ .Values.automationRepo }}/{{ .Values.statusFile }} : canUpdateDR=false; No sync will be pushed to the DR."
                  exit 2
              fi
      - name: createLocalRepositoriesV2
        type: utils/bashV2
        configuration:
          affinityGroup: together
          inputSteps:
            - name: checkOutagesV2
          integrations:
            - name: {{ .Values.jpdMain }}
            - name: {{ .Values.jpdDr }}
          cliPlugin: "{{ .Values.cliPlugin.name }}@{{ .Values.cliPlugin.version }}"
        execution:
          onExecute:
            - jf {{ .Values.cliPlugin.name }} -v 
            - jf {{ .Values.cliPlugin.name }} create local jpd_1 jpd_2 --dry-run=true --inventory=true
            - echo $JF_PLUGIN_REPOSYNC_INVENTORY_PATH/jpd2/inventory-local.yaml
            - cat $JF_PLUGIN_REPOSYNC_INVENTORY_PATH/jpd2/inventory-local.yaml
      - name: createRemoteRepositoriesV2
        type: utils/bashV2
        configuration:
          affinityGroup: together
          inputSteps:
            - name: createLocalRepositoriesV2
          integrations:
            - name: {{ .Values.jpdMain }}
            - name: {{ .Values.jpdDr }}
          cliPlugin: "{{ .Values.cliPlugin.name }}@{{ .Values.cliPlugin.version }}"
        execution:
          onExecute:
            - jf {{ .Values.cliPlugin.name }} -v 
            - jf {{ .Values.cliPlugin.name }} create remote jpd_1 jpd_2 --dry-run=true --inventory=true
            - echo $JF_PLUGIN_REPOSYNC_INVENTORY_PATH/jpd2/inventory-remote.yaml
            - cat $JF_PLUGIN_REPOSYNC_INVENTORY_PATH/jpd2/inventory-remote.yaml 
      - name: createVirtualRepositoriesV2
        type: utils/bashV2
        configuration:
          affinityGroup: together
          inputSteps:
            - name: createLocalRepositoriesV2
            - name: createRemoteRepositoriesV2
          integrations:
            - name: {{ .Values.jpdMain }}
            - name: {{ .Values.jpdDr }}
          cliPlugin: "{{ .Values.cliPlugin.name }}@{{ .Values.cliPlugin.version }}"     
        execution:
          onExecute:
            - jf {{ .Values.cliPlugin.name }} -v
            - jf {{ .Values.cliPlugin.name }} create virtual jpd_1 jpd_2 --dry-run=true --inventory=true
            - echo $JF_PLUGIN_REPOSYNC_INVENTORY_PATH/jpd2/inventory-virtual.yaml
            - cat $JF_PLUGIN_REPOSYNC_INVENTORY_PATH/jpd2/inventory-virtual.yaml  
      - name: storeDRInventoryV2
        type: utils/bashV2
        configuration:
          affinityGroup: together
          inputSteps:
            - name: createVirtualRepositoriesV2
          integrations:
            - name: {{ .Values.jpdMain }}
          cliPlugin: "{{ .Values.cliPlugin.name }}@{{ .Values.cliPlugin.version }}"
        execution:
          onExecute:
            - jf {{ .Values.cliPlugin.name }} -v
            - ls - l && cd $JF_PLUGIN_REPOSYNC_INVENTORY_PATH 
            - jf rt u jpd2/* $JFROG_CLI_PLUGINS_REPO/