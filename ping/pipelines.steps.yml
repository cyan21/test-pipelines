template: true   # required for local templates.
valuesFilePath: ./values.yml

pipelines:
    - name: HealthCheck
      configuration:
        jfrogCliVersion: 2
      steps:
  #Ping instances
#         - name: Ping
#           type: Bash
#           configuration:
#             integrations:
#               - name: {{ .Values.jpdIntegrationName }}
#           execution:
#             onStart:
#               - echo {{ .Values.jpdIntegrationName }}
#               - configure_jfrog_cli --artifactory-url "${int_{{ .Values.jpdIntegrationName }}_url}/artifactory" --access-token "${int_{{ .Values.jpdIntegrationName }}_accessToken}" --server-name psemea
# #              - configure_jfrog_cli --artifactory-url ${int_yann_platform_token_url}/artifactory --access-token ${int_yann_platform_token_accessToken} --server-name psemea
#             onExecute:
#               - | 
#                 for i in 1 2 3; do 
#                     echo "[INFO] iteration $i ..."
#                     jf rt ping --server-id psemea
#                     sleep 5
#                 done
        - name: Ping_2
          type: utils/ping
          configuration:
            affinityGroup: together
            integrations:
            {{- range .Values.jpdIntegrationName }}
              - name: "{{ . }}"
            {{- end }}
            iteration: 2
            sleepBetweenIteration: 5
          execution:
            onComplete:
              - echo ${mainHeartBeat}
        - name: Update_status_yml
          type: Bash
          configuration:
            affinityGroup: together
            inputSteps:
              - name: Ping_2
                status:
                  - failure
                  - error
                  - success
            integrations:
            {{- range .Values.jpdIntegrationName }}
              - name: "{{ . }}"
            {{- end }}
          execution:
            onStart:
              - echo ${mainHeartBeat}
              - echo "Ping_2 status = ${step_Ping_2_statusName}"
              - saas_dr=$(echo {{ .Values.jpdIntegrationName }} | cut -d" " -f2 | tr -d ])
              - url="int_${saas_dr}_url"
              - token="int_${saas_dr}_accessToken"
              - configure_jfrog_cli --artifactory-url "${!url}/artifactory" --access-token "${!token}" --server-name saas_dr
              - jf -v
              - jf c s
              - jf rt ping
              - curl -L https://github.com/mikefarah/yq/releases/download/v4.27.5/yq_linux_amd64 -o yq && chmod +x yq && ./yq -V
            onExecute:
              - exists=$(jf rt dl jfrog-automation/status.yml . | jq -r ."totals"."success")
              - |
                if [[ $exists -eq 1 ]]; then 
                  echo "[INFO] status.yml found"; 
                  hb=[[ ${step_Ping_2_statusName} == "success" ]] && echo "1000"
                else 
                  echo "[INFO] status.yml NOT found ... initializing it ...";
                  touch status.yml
                  ./yq -e -i .from=SAAS_DR status.yml
                  ./yq -e -i .to=SAAS_MAIN status.yml
                  hb=[[ ${step_Ping_2_statusName} == "success" ]] && echo "1000" || echo "0"
                fi
              - canUpdateDR=[[ ${step_Ping_2_statusName} == "success" ]] && echo "true" || echo "false"
              - epochNow=$(date +%s)
              - props="from=SAAS_DR;to=SAAS_MAIN;canUpdateDR=${canUpdateDR};lastHearBeatFromMain=${hb};requestDateTime=${epochNow}"
              - ./yq -e -i .canUpdateDR=${canUpdateDR} status.yml 
              - ./yq -e -i .lastHearBeatFromMain=${hb} status.yml 
              - ./yq -e -i .requestDateTime=${epochNow} status.yml 
              - jf rt u status.yml jfrog-automation/ --target-props $props
